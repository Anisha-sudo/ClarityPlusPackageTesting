package com.ClarityPlusPackage.OrderMService.Service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MappingJsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.FailingSerializer;
import com.fasterxml.jackson.databind.ser.std.NullSerializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ArrayIterator;
import com.fasterxml.jackson.databind.util.StdDateFormat;

import java.text.DateFormat;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.TimeZone;

import org.junit.jupiter.api.Test;
import org.springframework.http.client.ClientHttpRequestInitializer;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;
import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.DefaultUriBuilderFactory;
import org.springframework.web.util.UriTemplateHandler;

class ConfigClassDiffblueTest {
    /**
     * Method under test: {@link ConfigClass#restTemplate()}
     */
    @Test
    void testRestTemplate() {
        //   Diffblue Cover was unable to write a Spring test,
        //   so wrote a non-Spring test instead.
        //   Diffblue AI was unable to find a test

        RestTemplate actualRestTemplateResult = (new ConfigClass()).restTemplate();
        List<HttpMessageConverter<?>> messageConverters = actualRestTemplateResult.getMessageConverters();
        HttpMessageConverter<?> getResult = messageConverters.get(5);
        ObjectMapper objectMapper = ((MappingJackson2HttpMessageConverter) getResult).getObjectMapper();
        SerializationConfig serializationConfig = objectMapper.getSerializationConfig();
        PrettyPrinter defaultPrettyPrinter = serializationConfig.getDefaultPrettyPrinter();
        assertTrue(defaultPrettyPrinter instanceof DefaultPrettyPrinter);
        ContextAttributes attributes = serializationConfig.getAttributes();
        assertTrue(attributes instanceof ContextAttributes.Impl);
        HttpMessageConverter<?> getResult2 = messageConverters.get(3);
        List<HttpMessageConverter<?>> partConverters = ((AllEncompassingFormHttpMessageConverter) getResult2)
                .getPartConverters();
        HttpMessageConverter<?> getResult3 = partConverters.get(4);
        ObjectMapper objectMapper2 = ((MappingJackson2HttpMessageConverter) getResult3).getObjectMapper();
        DeserializationContext deserializationContext = objectMapper2.getDeserializationContext();
        DeserializerFactory factory = deserializationContext.getFactory();
        assertTrue(factory instanceof BeanDeserializerFactory);
        DeserializationContext deserializationContext2 = objectMapper.getDeserializationContext();
        DeserializerFactory factory2 = deserializationContext2.getFactory();
        assertTrue(factory2 instanceof BeanDeserializerFactory);
        assertTrue(deserializationContext instanceof DefaultDeserializationContext.Impl);
        assertTrue(deserializationContext2 instanceof DefaultDeserializationContext.Impl);
        SerializationConfig serializationConfig2 = objectMapper2.getSerializationConfig();
        ClassIntrospector classIntrospector = serializationConfig2.getClassIntrospector();
        assertTrue(classIntrospector instanceof BasicClassIntrospector);
        ClassIntrospector classIntrospector2 = serializationConfig.getClassIntrospector();
        assertTrue(classIntrospector2 instanceof BasicClassIntrospector);
        AccessorNamingStrategy.Provider accessorNaming = serializationConfig.getAccessorNaming();
        assertTrue(accessorNaming instanceof DefaultAccessorNamingStrategy.Provider);
        PolymorphicTypeValidator polymorphicTypeValidator = objectMapper.getPolymorphicTypeValidator();
        assertTrue(polymorphicTypeValidator instanceof LaissezFaireSubTypeValidator);
        SubtypeResolver subtypeResolver = objectMapper2.getSubtypeResolver();
        assertTrue(subtypeResolver instanceof StdSubtypeResolver);
        SubtypeResolver subtypeResolver2 = objectMapper.getSubtypeResolver();
        assertTrue(subtypeResolver2 instanceof StdSubtypeResolver);
        SerializerFactory serializerFactory = objectMapper2.getSerializerFactory();
        assertTrue(serializerFactory instanceof BeanSerializerFactory);
        SerializerFactory serializerFactory2 = objectMapper.getSerializerFactory();
        assertTrue(serializerFactory2 instanceof BeanSerializerFactory);
        SerializerProvider serializerProvider = objectMapper2.getSerializerProvider();
        assertTrue(serializerProvider instanceof DefaultSerializerProvider.Impl);
        SerializerProvider serializerProvider2 = objectMapper.getSerializerProvider();
        assertTrue(serializerProvider2 instanceof DefaultSerializerProvider.Impl);
        assertTrue(objectMapper2.getSerializerProviderInstance() instanceof DefaultSerializerProvider.Impl);
        SerializerProvider serializerProviderInstance = objectMapper.getSerializerProviderInstance();
        assertTrue(serializerProviderInstance instanceof DefaultSerializerProvider.Impl);
        JsonSerializer<Object> defaultNullKeySerializer = serializerProvider2.getDefaultNullKeySerializer();
        assertTrue(defaultNullKeySerializer instanceof FailingSerializer);
        JsonSerializer<Object> defaultNullValueSerializer = serializerProvider2.getDefaultNullValueSerializer();
        assertTrue(defaultNullValueSerializer instanceof NullSerializer);
        assertTrue(actualRestTemplateResult.getRequestFactory() instanceof SimpleClientHttpRequestFactory);
        assertTrue(actualRestTemplateResult.getErrorHandler() instanceof DefaultResponseErrorHandler);
        UriTemplateHandler uriTemplateHandler = actualRestTemplateResult.getUriTemplateHandler();
        assertTrue(uriTemplateHandler instanceof DefaultUriBuilderFactory);
        JsonFactory jsonFactory = objectMapper.getJsonFactory();
        assertEquals(" ", jsonFactory.getRootValueSeparator());
        JsonFactory factory3 = objectMapper2.getFactory();
        assertEquals(" ", factory3.getRootValueSeparator());
        assertNull(deserializationContext.getParser());
        assertNull(deserializationContext2.getParser());
        assertNull(deserializationContext.getConfig());
        assertNull(deserializationContext2.getConfig());
        DeserializationConfig deserializationConfig = objectMapper2.getDeserializationConfig();
        assertNull(deserializationConfig.getFullRootName());
        assertNull(objectMapper2.getPropertyNamingStrategy());
        assertNull(objectMapper.getPropertyNamingStrategy());
        assertNull(deserializationConfig.getPropertyNamingStrategy());
        DeserializationConfig deserializationConfig2 = objectMapper.getDeserializationConfig();
        assertNull(deserializationConfig2.getPropertyNamingStrategy());
        assertNull(serializationConfig2.getPropertyNamingStrategy());
        assertNull(serializationConfig.getPropertyNamingStrategy());
        assertNull(serializerProvider.getConfig());
        assertNull(serializerProvider2.getConfig());
        assertNull(deserializationConfig.getHandlerInstantiator());
        assertNull(deserializationConfig2.getHandlerInstantiator());
        assertNull(serializationConfig2.getHandlerInstantiator());
        assertNull(serializationConfig.getHandlerInstantiator());
        assertNull(serializationConfig2.getFilterProvider());
        assertNull(serializationConfig.getFilterProvider());
        assertNull(deserializationConfig.getProblemHandlers());
        assertNull(deserializationConfig2.getProblemHandlers());
        assertNull(deserializationConfig.getDefaultMergeable());
        assertNull(deserializationConfig2.getDefaultMergeable());
        assertNull(serializationConfig2.getDefaultMergeable());
        assertNull(serializationConfig.getDefaultMergeable());
        assertNull(deserializationContext.getActiveView());
        assertNull(deserializationContext2.getActiveView());
        assertNull(serializerProvider.getActiveView());
        assertNull(serializerProvider2.getActiveView());
        assertNull(deserializationConfig.getActiveView());
        assertNull(deserializationConfig2.getActiveView());
        assertNull(serializationConfig2.getActiveView());
        assertNull(serializationConfig.getActiveView());
        TypeFactory typeFactory = objectMapper2.getTypeFactory();
        assertNull(typeFactory.getClassLoader());
        TypeFactory typeFactory2 = objectMapper.getTypeFactory();
        assertNull(typeFactory2.getClassLoader());
        assertNull(deserializationConfig2.getRootName());
        assertNull(serializationConfig2.getRootName());
        assertNull(serializationConfig.getRootName());
        assertEquals(0, deserializationContext.getDeserializationFeatures());
        assertEquals(0, deserializationContext2.getDeserializationFeatures());
        assertEquals(1, messageConverters.get(2).getSupportedMediaTypes().size());
        assertEquals(2, partConverters.get(0).getSupportedMediaTypes().size());
        assertEquals(2, partConverters.get(1).getSupportedMediaTypes().size());
        assertEquals(2, getResult3.getSupportedMediaTypes().size());
        assertEquals(2, messageConverters.get(0).getSupportedMediaTypes().size());
        assertEquals(2, messageConverters.get(1).getSupportedMediaTypes().size());
        assertEquals(2, getResult.getSupportedMediaTypes().size());
        Set<Object> registeredModuleIds = objectMapper.getRegisteredModuleIds();
        assertEquals(2, registeredModuleIds.size());
        assertEquals(2079, jsonFactory.getGeneratorFeatures());
        assertEquals(2079, factory3.getGeneratorFeatures());
        assertEquals(21771068, serializationConfig2.getSerializationFeatures());
        assertEquals(21771068, serializationConfig.getSerializationFeatures());
        assertEquals(237020288, deserializationConfig.getDeserializationFeatures());
        assertEquals(237020288, deserializationConfig2.getDeserializationFeatures());
        HttpMessageConverter<?> getResult4 = partConverters.get(3);
        assertEquals(3, getResult4.getSupportedMediaTypes().size());
        HttpMessageConverter<?> getResult5 = messageConverters.get(4);
        assertEquals(3, getResult5.getSupportedMediaTypes().size());
        assertEquals(4, getResult2.getSupportedMediaTypes().size());
        assertEquals(5, partConverters.size());
        assertEquals(6, messageConverters.size());
        assertEquals(65537, jsonFactory.getParserFeatures());
        assertEquals(65537, factory3.getParserFeatures());
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig2.getSerializationInclusion());
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig.getSerializationInclusion());
        assertEquals(DefaultUriBuilderFactory.EncodingMode.URI_COMPONENT,
                ((DefaultUriBuilderFactory) uriTemplateHandler).getEncodingMode());
        DeserializerFactoryConfig factoryConfig = ((BeanDeserializerFactory) factory).getFactoryConfig();
        assertFalse(factoryConfig.hasAbstractTypeResolvers());
        DeserializerFactoryConfig factoryConfig2 = ((BeanDeserializerFactory) factory2).getFactoryConfig();
        assertFalse(factoryConfig2.hasAbstractTypeResolvers());
        assertFalse(factoryConfig.hasDeserializerModifiers());
        assertFalse(factoryConfig2.hasDeserializerModifiers());
        assertFalse(deserializationConfig.hasExplicitTimeZone());
        assertFalse(deserializationConfig2.hasExplicitTimeZone());
        assertFalse(serializationConfig2.hasExplicitTimeZone());
        assertFalse(serializationConfig.hasExplicitTimeZone());
        SerializerFactoryConfig factoryConfig3 = ((BeanSerializerFactory) serializerFactory).getFactoryConfig();
        assertFalse(factoryConfig3.hasSerializerModifiers());
        SerializerFactoryConfig factoryConfig4 = ((BeanSerializerFactory) serializerFactory2).getFactoryConfig();
        assertFalse(factoryConfig4.hasSerializerModifiers());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult4).isProcessExternalEntities());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult5).isProcessExternalEntities());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult4).isSupportDtd());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult5).isSupportDtd());
        assertTrue(factoryConfig.hasDeserializers());
        assertTrue(factoryConfig2.hasDeserializers());
        assertTrue(factoryConfig.hasKeyDeserializers());
        assertTrue(factoryConfig2.hasKeyDeserializers());
        assertTrue(factoryConfig.hasValueInstantiators());
        assertTrue(factoryConfig2.hasValueInstantiators());
        assertTrue(deserializationConfig.isAnnotationProcessingEnabled());
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
        assertTrue(serializationConfig.isAnnotationProcessingEnabled());
        assertTrue(factoryConfig3.hasKeySerializers());
        assertTrue(factoryConfig4.hasKeySerializers());
        assertTrue(factoryConfig3.hasSerializers());
        assertTrue(factoryConfig4.hasSerializers());
        assertTrue(((ArrayIterator<Deserializers>) factoryConfig2.deserializers()).hasNext());
        assertTrue(((ArrayIterator<Serializers>) factoryConfig3.serializers()).hasNext());
        assertTrue(((ArrayIterator<Serializers>) factoryConfig4.serializers()).hasNext());
        List<ClientHttpRequestInitializer> clientHttpRequestInitializers = actualRestTemplateResult
                .getClientHttpRequestInitializers();
        assertTrue(clientHttpRequestInitializers.isEmpty());
        assertTrue(((DefaultUriBuilderFactory) uriTemplateHandler).getDefaultUriVariables().isEmpty());
        assertEquals(registeredModuleIds, objectMapper2.getRegisteredModuleIds());
        assertEquals(clientHttpRequestInitializers, actualRestTemplateResult.getInterceptors());
        ConstructorDetector expectedConstructorDetector = deserializationConfig2.getConstructorDetector();
        assertSame(expectedConstructorDetector, deserializationConfig.getConstructorDetector());
        JsonNodeFactory nodeFactory = objectMapper.getNodeFactory();
        assertSame(nodeFactory, deserializationConfig.getNodeFactory());
        assertSame(nodeFactory, deserializationConfig2.getNodeFactory());
        assertSame(nodeFactory, objectMapper2.getNodeFactory());
        assertSame(typeFactory, deserializationConfig.getTypeFactory());
        assertSame(typeFactory, serializationConfig2.getTypeFactory());
        assertSame(typeFactory2, deserializationConfig2.getTypeFactory());
        assertSame(typeFactory2, serializationConfig.getTypeFactory());
        Base64Variant base64Variant = serializationConfig.getBase64Variant();
        assertSame(base64Variant, deserializationConfig.getBase64Variant());
        assertSame(base64Variant, deserializationConfig2.getBase64Variant());
        assertSame(base64Variant, serializationConfig2.getBase64Variant());
        Locale locale = serializationConfig.getLocale();
        assertSame(locale, serializerProviderInstance.getLocale());
        assertSame(locale, deserializationConfig.getLocale());
        assertSame(locale, deserializationConfig2.getLocale());
        assertSame(locale, serializationConfig2.getLocale());
        JsonSetter.Value defaultSetterInfo = serializationConfig.getDefaultSetterInfo();
        assertSame(defaultSetterInfo, deserializationConfig2.getDefaultSetterInfo());
        assertSame(defaultSetterInfo, serializationConfig2.getDefaultSetterInfo());
        assertSame(objectMapper2, factory3.getCodec());
        assertSame(objectMapper, jsonFactory.getCodec());
        assertSame(defaultPrettyPrinter, serializationConfig2.getDefaultPrettyPrinter());
        assertSame(jsonFactory, objectMapper.getFactory());
        assertSame(factory3, objectMapper2.getJsonFactory());
        assertSame(attributes, deserializationConfig.getAttributes());
        assertSame(attributes, deserializationConfig2.getAttributes());
        assertSame(attributes, serializationConfig2.getAttributes());
        assertSame(classIntrospector, deserializationConfig.getClassIntrospector());
        assertSame(classIntrospector2, deserializationConfig2.getClassIntrospector());
        assertSame(accessorNaming, deserializationConfig.getAccessorNaming());
        assertSame(accessorNaming, deserializationConfig2.getAccessorNaming());
        assertSame(accessorNaming, serializationConfig2.getAccessorNaming());
        assertSame(serializationConfig.getAnnotationIntrospector(), serializerProviderInstance.getAnnotationIntrospector());
        assertSame(serializationConfig.getAnnotationIntrospector(), deserializationConfig.getAnnotationIntrospector());
        assertSame(serializationConfig.getAnnotationIntrospector(), deserializationConfig2.getAnnotationIntrospector());
        assertSame(serializationConfig.getAnnotationIntrospector(), serializationConfig2.getAnnotationIntrospector());
        assertSame(objectMapper.getVisibilityChecker(), serializationConfig2.getDefaultVisibilityChecker());
        assertSame(objectMapper.getVisibilityChecker(), serializationConfig.getDefaultVisibilityChecker());
        assertSame(polymorphicTypeValidator, objectMapper2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, deserializationConfig2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, serializationConfig2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, serializationConfig.getPolymorphicTypeValidator());
        assertSame(subtypeResolver, deserializationConfig.getSubtypeResolver());
        assertSame(subtypeResolver, serializationConfig2.getSubtypeResolver());
        assertSame(subtypeResolver2, deserializationConfig2.getSubtypeResolver());
        assertSame(subtypeResolver2, serializationConfig.getSubtypeResolver());
        assertSame(defaultNullKeySerializer, serializerProvider.getDefaultNullKeySerializer());
        assertSame(defaultNullValueSerializer, serializerProvider.getDefaultNullValueSerializer());
        assertSame(objectMapper.getDateFormat(), deserializationConfig.getDateFormat());
        assertSame(objectMapper.getDateFormat(), deserializationConfig2.getDateFormat());
        assertSame(objectMapper.getDateFormat(), serializationConfig2.getDateFormat());
        assertSame(objectMapper.getDateFormat(), serializationConfig.getDateFormat());
    }

    /**
     * Method under test: {@link ConfigClass#corsConfigurer()}
     */
    @Test
    void testCorsConfigurer() throws MissingResourceException {
        //   Diffblue Cover was unable to write a Spring test,
        //   so wrote a non-Spring test instead.
        //   Diffblue AI was unable to find a test

        ConfigClass configClass = new ConfigClass();
        configClass.corsConfigurer();
        RestTemplate restTemplateResult = configClass.restTemplate();
        List<HttpMessageConverter<?>> messageConverters = restTemplateResult.getMessageConverters();
        HttpMessageConverter<?> getResult = messageConverters.get(5);
        ObjectMapper objectMapper = ((MappingJackson2HttpMessageConverter) getResult).getObjectMapper();
        JsonFactory factory = objectMapper.getFactory();
        assertEquals(" ", factory.getRootValueSeparator());
        SerializerProvider serializerProviderInstance = objectMapper.getSerializerProviderInstance();
        Locale locale = serializerProviderInstance.getLocale();
        assertEquals("", locale.getDisplayScript());
        assertEquals("", locale.getDisplayVariant());
        assertEquals("", locale.getScript());
        assertEquals("", locale.getVariant());
        TimeZone timeZone = serializerProviderInstance.getTimeZone();
        assertEquals("Coordinated Universal Time", timeZone.getDisplayName());
        assertEquals("English (United States)", locale.getDisplayName());
        assertEquals("English", locale.getDisplayLanguage());
        HttpMessageConverter<?> getResult2 = messageConverters.get(1);
        assertEquals("ISO-8859-1", ((StringHttpMessageConverter) getResult2).getDefaultCharset().name());
        assertEquals("JSON", factory.getFormatName());
        DeserializationConfig deserializationConfig = objectMapper.getDeserializationConfig();
        Base64Variant base64Variant = deserializationConfig.getBase64Variant();
        assertEquals("MIME-NO-LINEFEEDS", base64Variant.getName());
        assertEquals("MIME-NO-LINEFEEDS", base64Variant.toString());
        assertEquals("US", locale.getCountry());
        assertEquals("USA", locale.getISO3Country());
        assertEquals("UTC", timeZone.getID());
        assertEquals("United States", locale.getDisplayCountry());
        DateFormat dateFormat = objectMapper.getDateFormat();
        assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSX', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]",
                ((StdDateFormat) dateFormat).toPattern());
        Version versionResult = factory.version();
        assertEquals("com.fasterxml.jackson.core", versionResult.getGroupId());
        Version versionResult2 = objectMapper.version();
        assertEquals("com.fasterxml.jackson.core", versionResult2.getGroupId());
        assertEquals("com.fasterxml.jackson.core/jackson-core/2.14.2", versionResult.toFullString());
        assertEquals("com.fasterxml.jackson.core/jackson-databind/2.14.2", versionResult2.toFullString());
        assertEquals("en", locale.getLanguage());
        assertEquals("eng", locale.getISO3Language());
        assertEquals("jackson-core", versionResult.getArtifactId());
        assertEquals("jackson-databind", versionResult2.getArtifactId());
        assertEquals('=', base64Variant.getPaddingChar());
        assertEquals(0, factory.getFormatGeneratorFeatures());
        assertEquals(0, factory.getFormatParserFeatures());
        DeserializationContext deserializationContext = objectMapper.getDeserializationContext();
        assertEquals(0, deserializationContext.getDeserializationFeatures());
        assertEquals(0, timeZone.getDSTSavings());
        assertEquals(14, versionResult.getMinorVersion());
        assertEquals(14, versionResult2.getMinorVersion());
        assertEquals(2, versionResult.getMajorVersion());
        assertEquals(2, versionResult2.getMajorVersion());
        assertEquals(2, versionResult.getPatchLevel());
        assertEquals(2, versionResult2.getPatchLevel());
        assertEquals(2, messageConverters.get(0).getSupportedMediaTypes().size());
        assertEquals(2, getResult2.getSupportedMediaTypes().size());
        assertEquals(2, getResult.getSupportedMediaTypes().size());
        assertEquals(2, objectMapper.getRegisteredModuleIds().size());
        assertEquals(2079, factory.getGeneratorFeatures());
        SerializationConfig serializationConfig = objectMapper.getSerializationConfig();
        assertEquals(21771068, serializationConfig.getSerializationFeatures());
        assertEquals(237020288, deserializationConfig.getDeserializationFeatures());
        HttpMessageConverter<?> getResult3 = messageConverters.get(4);
        assertEquals(3, getResult3.getSupportedMediaTypes().size());
        assertEquals(6, messageConverters.size());
        assertEquals(65537, factory.getParserFeatures());
        JsonNodeFactory nodeFactory = objectMapper.getNodeFactory();
        assertEquals(9999, nodeFactory.getMaxElementIndexForInsert());
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig.getSerializationInclusion());
        JsonInclude.Value defaultPropertyInclusion = serializationConfig.getDefaultPropertyInclusion();
        assertEquals(JsonInclude.Include.USE_DEFAULTS, defaultPropertyInclusion.getContentInclusion());
        assertEquals(JsonInclude.Include.USE_DEFAULTS, defaultPropertyInclusion.getValueInclusion());
        JsonSetter.Value defaultSetterInfo = serializationConfig.getDefaultSetterInfo();
        assertEquals(Nulls.DEFAULT, defaultSetterInfo.getContentNulls());
        assertEquals(Nulls.DEFAULT, defaultSetterInfo.getValueNulls());
        assertEquals(DefaultUriBuilderFactory.EncodingMode.URI_COMPONENT,
                ((DefaultUriBuilderFactory) restTemplateResult.getUriTemplateHandler()).getEncodingMode());
        assertFalse(versionResult.isSnapshot());
        assertFalse(versionResult2.isSnapshot());
        assertFalse(versionResult.isUknownVersion());
        assertFalse(versionResult2.isUknownVersion());
        assertFalse(versionResult.isUnknownVersion());
        assertFalse(versionResult2.isUnknownVersion());
        JsonSerializer<Object> defaultNullKeySerializer = serializerProviderInstance.getDefaultNullKeySerializer();
        assertFalse(defaultNullKeySerializer.isUnwrappingSerializer());
        SerializerProvider serializerProvider = objectMapper.getSerializerProvider();
        JsonSerializer<Object> defaultNullValueSerializer = serializerProvider.getDefaultNullValueSerializer();
        assertFalse(defaultNullValueSerializer.isUnwrappingSerializer());
        DeserializerFactoryConfig factoryConfig = ((BeanDeserializerFactory) deserializationContext.getFactory())
                .getFactoryConfig();
        assertFalse(factoryConfig.hasAbstractTypeResolvers());
        assertFalse(factoryConfig.hasDeserializerModifiers());
        assertFalse(deserializationConfig.hasExplicitTimeZone());
        assertFalse(serializationConfig.hasExplicitTimeZone());
        SerializerFactoryConfig factoryConfig2 = ((BeanSerializerFactory) objectMapper.getSerializerFactory())
                .getFactoryConfig();
        assertFalse(factoryConfig2.hasSerializerModifiers());
        assertFalse(locale.hasExtensions());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult3).isProcessExternalEntities());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult3).isSupportDtd());
        assertTrue(factoryConfig.hasDeserializers());
        assertTrue(factoryConfig.hasKeyDeserializers());
        assertTrue(factoryConfig.hasValueInstantiators());
        assertTrue(deserializationConfig.isAnnotationProcessingEnabled());
        assertTrue(serializationConfig.isAnnotationProcessingEnabled());
        assertTrue(factoryConfig2.hasKeySerializers());
        assertTrue(factoryConfig2.hasSerializers());
        assertTrue(((ArrayIterator<Serializers>) factoryConfig2.serializers()).hasNext());
        assertTrue(((StdDateFormat) dateFormat).isColonIncludedInTimeZone());
        assertTrue(dateFormat.isLenient());
        List<ClientHttpRequestInitializer> clientHttpRequestInitializers = restTemplateResult
                .getClientHttpRequestInitializers();
        assertTrue(clientHttpRequestInitializers.isEmpty());
        List<ClientHttpRequestInterceptor> interceptors = restTemplateResult.getInterceptors();
        assertTrue(interceptors.isEmpty());
        assertTrue(
                ((DefaultUriBuilderFactory) restTemplateResult.getUriTemplateHandler()).getDefaultUriVariables().isEmpty());
        Set<String> unicodeLocaleAttributes = locale.getUnicodeLocaleAttributes();
        assertTrue(unicodeLocaleAttributes.isEmpty());
        assertEquals(clientHttpRequestInitializers, interceptors);
        assertEquals(Integer.MAX_VALUE, base64Variant.getMaxLineLength());
        assertEquals('=', base64Variant.getPaddingByte());
        assertSame(nodeFactory, deserializationConfig.getNodeFactory());
        assertSame(serializationConfig, serializerProviderInstance.getConfig());
        TypeFactory typeFactory = objectMapper.getTypeFactory();
        assertSame(typeFactory, serializerProviderInstance.getTypeFactory());
        assertSame(typeFactory, deserializationConfig.getTypeFactory());
        assertSame(typeFactory, serializationConfig.getTypeFactory());
        AnnotationIntrospector annotationIntrospector = deserializationConfig.getAnnotationIntrospector();
        assertSame(versionResult2, annotationIntrospector.version());
        assertSame(locale, deserializationConfig.getLocale());
        assertSame(locale, serializationConfig.getLocale());
        assertSame(timeZone, deserializationConfig.getTimeZone());
        assertSame(timeZone, serializationConfig.getTimeZone());
        assertSame(base64Variant, serializationConfig.getBase64Variant());
        assertSame(defaultPropertyInclusion, deserializationConfig.getDefaultPropertyInclusion());
        assertSame(defaultSetterInfo, deserializationConfig.getDefaultSetterInfo());
        assertSame(unicodeLocaleAttributes, locale.getExtensionKeys());
        assertSame(unicodeLocaleAttributes, locale.getUnicodeLocaleKeys());
        assertSame(objectMapper, factory.getCodec());
        assertSame(factory, objectMapper.getJsonFactory());
        assertSame(deserializationConfig.getAttributes(), serializationConfig.getAttributes());
        assertSame(deserializationConfig.getClassIntrospector(), serializationConfig.getClassIntrospector());
        assertSame(deserializationConfig.getAccessorNaming(), serializationConfig.getAccessorNaming());
        assertSame(annotationIntrospector, serializerProviderInstance.getAnnotationIntrospector());
        assertSame(annotationIntrospector, serializationConfig.getAnnotationIntrospector());
        assertSame(objectMapper.getVisibilityChecker(), deserializationConfig.getDefaultVisibilityChecker());
        assertSame(objectMapper.getVisibilityChecker(), serializationConfig.getDefaultVisibilityChecker());
        assertSame(objectMapper.getPolymorphicTypeValidator(), deserializationConfig.getPolymorphicTypeValidator());
        assertSame(objectMapper.getPolymorphicTypeValidator(), serializationConfig.getPolymorphicTypeValidator());
        assertSame(objectMapper.getSubtypeResolver(), deserializationConfig.getSubtypeResolver());
        assertSame(objectMapper.getSubtypeResolver(), serializationConfig.getSubtypeResolver());
        assertSame(defaultNullKeySerializer, serializerProvider.getDefaultNullKeySerializer());
        assertSame(defaultNullValueSerializer, serializerProviderInstance.getDefaultNullValueSerializer());
        assertSame(dateFormat, deserializationConfig.getDateFormat());
        assertSame(dateFormat, serializationConfig.getDateFormat());
    }
}
